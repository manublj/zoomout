import { SHEET_CONFIG } from './sheetValidation';
import { formConfigs } from './formUtils';

// Generic validation function for dynamic forms
export function validateDynamicForm(formConfig, formData) {
  const errors = {};

  for (const [fieldName, fieldConfig] of Object.entries(formConfig)) {
    if (fieldConfig.autoGenerated || fieldConfig.visible === false) continue;

    if (fieldConfig.required && !formData[fieldName]) {
      errors[fieldName] = `${fieldConfig.label} is required`;
    }

    if (fieldConfig.type === 'date' && formData[fieldName]) {
      const date = new Date(formData[fieldName]);
      if (isNaN(date.getTime())) {
        errors[fieldName] = `${fieldConfig.label} must be a valid date`;
      }
    }
  }

  return errors;
}

// Legacy validation function for sheet-based validation
export function validateFormData(formType, formData) {
  const config = SHEET_CONFIG[formType];
  const errors = {};
  let isValid = true;

  if (!config) {
    return { isValid: false, errors: { general: 'Invalid form configuration' } };
  }

  Object.entries(config.fields).forEach(([fieldName, fieldConfig]) => {
    if (fieldConfig.condition && !fieldConfig.condition(formData)) {
      return;
    }

    if (fieldConfig.required) {
      const value = formData[fieldName];
      if (!value || (Array.isArray(value) && value.length === 0)) {
        errors[fieldName] = `${fieldConfig.label} is required`;
        isValid = false;
      }
    }
  });

  return { isValid, errors };
}

// Transform function for sheet data
export function transformFormDataForSheet(formType, formData) {
  const config = SHEET_CONFIG[formType];
  const transformedData = { ...formData };

  Object.entries(config.fields).forEach(([fieldName, fieldConfig]) => {
    if (fieldConfig.transform && transformedData[fieldName] !== undefined) {
      transformedData[fieldName] = fieldConfig.transform(transformedData[fieldName]);
    }
  });

  return transformedData;
}

// Sheet data validation
export function validateSheetData(sheetName, formData) {
  const formConfig = formConfigs[sheetName];
  if (!formConfig) {
    throw new Error(`No form configuration found for sheet: ${sheetName}`);
  }

  return validateDynamicForm(formConfig, formData);
}

export function validateTimelineData(formData) {
  const errors = {};

  if (!formData.timeline_id?.trim()) errors.timeline_id = 'Timeline ID is required';
  if (!formData.title?.trim()) errors.title = 'Title is required';
  if (!formData.description?.trim()) errors.description = 'Description is required';
  if (!formData.category?.trim()) errors.category = 'Category is required';
  if (typeof formData.is_public !== 'boolean') errors.is_public = 'Public status is required';

  return errors;
}

export function validateTimelineRegistryData(formData) {
  const errors = {};

  if (!formData.phase_id?.trim()) errors.phase_id = 'Phase ID is required';
  if (!formData.phase_label?.trim()) errors.phase_label = 'Phase Label is required';
  if (!formData.description?.trim()) errors.description = 'Description is required';
  if (!formData.date_range?.trim()) errors.date_range = 'Date Range is required';

  return errors;
}

export function validateTimelineGridData(formData) {
  const errors = {};

  if (!formData.timeline_grid_id?.trim()) errors.timeline_grid_id = 'Timeline Grid ID is required';
  if (!formData.linked_phase_id?.trim()) errors.linked_phase_id = 'Linked Phase ID is required';
  if (!formData.zoom_level?.trim()) errors.zoom_level = 'Zoom Level is required';
  if (!formData.label?.trim()) errors.label = 'Label is required';

  return errors;
}