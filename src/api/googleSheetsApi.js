import { GoogleSpreadsheet } from 'google-spreadsheet';
import { SHEET_CONFIG } from '../utils/sheetValidation';
import { v4 as uuidv4 } from 'uuid';
import { formConfigs } from '../utils/formUtils';

// Debug logging setup
const DEBUG = true;

const logDebug = (...args) => {
  if (DEBUG) {
    console.log('[DEBUG]', ...args);
  }
};

// Track API calls
const logAPICall = async (operation, sheetName, data) => {
  if (DEBUG) {
    console.group(`📡 API Call: ${operation}`);
    console.log('Sheet:', sheetName);
    console.log('Data:', data);
    console.time('Operation Duration');
    try {
      const result = await data;
      console.log('Result:', result);
      return result;
    } finally {
      console.timeEnd('Operation Duration');
      console.groupEnd();
    }
  }
  return data;
};

export const SHEET_NAMES = {
  ENTITIES: 'ENTITIES',
  EVENTS: 'EVENTS',  // Changed from REPORTING to EVENTS
  THEORY: 'THEORY',
  TIMELINES: 'TIMELINES',
};

const SPREADSHEET_ID = process.env.REACT_APP_GOOGLE_SHEETS_ID;
const CLIENT_EMAIL = process.env.REACT_APP_GOOGLE_SERVICE_ACCOUNT_EMAIL;
const PRIVATE_KEY = process.env.REACT_APP_GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n');

const doc = new GoogleSpreadsheet(SPREADSHEET_ID);
let isInitialized = false;

const initializeAuth = async () => {
  if (isInitialized) return true;
  
  try {
    await doc.useServiceAccountAuth({
      client_email: CLIENT_EMAIL,
      private_key: PRIVATE_KEY,
    });
    await doc.loadInfo();
    isInitialized = true;
    return true;
  } catch (error) {
    console.error('Auth Error:', error);
    throw error;
  }
};

const transformRowData = (sheetName, rowData) => {
  const config = SHEET_CONFIG[sheetName];
  const transformedData = {};

  // Debug multi-select fields
  console.group('🔍 Transforming Row Data');
  console.log('Original data:', rowData);

  Object.entries(config.fields).forEach(([fieldName, fieldConfig]) => {
    let value = rowData[fieldName];

    // Handle multi-select fields
    if (fieldConfig.type === 'multiSelect' && Array.isArray(value)) {
      value = value.join(', ');
      console.log(`Transformed ${fieldName}:`, value);
    }

    // Handle auto-generated fields
    if (fieldConfig.auto && fieldConfig.transform) {
      value = fieldConfig.transform();
    }

    transformedData[fieldName] = value || '';
  });

  console.log('Transformed data:', transformedData);
  console.groupEnd();

  return transformedData;
};

export const prepareFormDataForSheet = (sheetName, formData) => {
  const transformedData = { ...formData };

  // Auto-generate fields
  if (!transformedData.event_id) {
    transformedData.event_id = uuidv4();
  }

  // Remove hidden/auto-generated fields
  Object.keys(transformedData).forEach((key) => {
    if (eventFormConfig[key]?.autoGenerated || !eventFormConfig[key]?.visible) {
      delete transformedData[key];
    }
  });

  return transformedData;
};

export async function addRowToSheet(sheetName, formData) {
  const formConfig = formConfigs[sheetName];
  if (!formConfig) {
    throw new Error(`No form configuration found for sheet: ${sheetName}`);
  }

  // Auto-generate fields
  Object.entries(formConfig).forEach(([fieldName, fieldConfig]) => {
    if (fieldConfig.autoGenerated) {
      formData[fieldName] = fieldConfig.defaultValue || new Date().toISOString();
    }
  });

  // Prepare the payload for submission
  const payload = {};
  for (const [fieldName, fieldConfig] of Object.entries(formConfig)) {
    if (fieldConfig.visible !== false && !fieldConfig.autoGenerated) {
      payload[fieldName] = formData[fieldName] || '';
    }
  }

  // Simulate API call to Google Sheets
  console.log(`Submitting data to sheet: ${sheetName}`, payload);
  // Replace this with actual API call logic
  return Promise.resolve({ success: true });
}

export const getSheetData = async (sheetName) => {
  try {
    logDebug('Fetching sheet data', { sheetName });
    
    await initializeAuth();
    const sheet = doc.sheetsByTitle[sheetName];
    
    if (!sheet) {
      throw new Error(`Sheet "${sheetName}" not found`);
    }

    const rows = await logAPICall(
      'getRows',
      sheetName,
      sheet.getRows()
    );
    
    const transformedData = rows.map(row => {
      const rowData = {};
      SHEET_CONFIG[sheetName].displayOrder.forEach(fieldName => {
        rowData[fieldName] = row[fieldName];
      });
      return rowData;
    });

    logDebug('Sheet data fetched', { rowCount: transformedData.length });
    return transformedData;
  } catch (error) {
    console.error('getSheetData Error:', error);
    logDebug('Failed to fetch sheet data', { error });
    throw error;
  }
};

export const getSheetHeaders = async (sheetName) => {
  try {
    await initializeAuth();
    const sheet = doc.sheetsByTitle[sheetName];
    
    if (!sheet) {
      throw new Error(`Sheet "${sheetName}" not found`);
    }

    return SHEET_CONFIG[sheetName].displayOrder;
  } catch (error) {
    console.error('getSheetHeaders Error:', error);
    throw error;
  }
};

export const addIssue = async (issueData) => {
    const response = await fetch("/api/issues", {
        method: "POST",
        body: JSON.stringify(issueData),
        headers: { "Content-Type": "application/json" },
    });
    return response.json();
};

export const getIssues = async () => {
    const response = await fetch("/api/issues");
    return response.json();
};

export const updateIssue = async (issueId, updatedData) => {
    const response = await fetch(`/api/issues/${issueId}`, {
        method: "PUT",
        body: JSON.stringify(updatedData),
        headers: { "Content-Type": "application/json" },
    });
    return response.json();
};

export const deleteIssue = async (issueId) => {
    const response = await fetch(`/api/issues/${issueId}`, {
        method: "DELETE",
    });
    return response.json();
};

export const addStruggle = async (struggleData) => {
    const response = await fetch("/api/struggles", {
        method: "POST",
        body: JSON.stringify(struggleData),
        headers: { "Content-Type": "application/json" },
    });
    return response.json();
};

export const getStruggles = async () => {
    const response = await fetch("/api/struggles");
    return response.json();
};

export const updateStruggle = async (struggleId, updatedData) => {
    const response = await fetch(`/api/struggles/${struggleId}`, {
        method: "PUT",
        body: JSON.stringify(updatedData),
        headers: { "Content-Type": "application/json" },
    });
    return response.json();
};

export const deleteStruggle = async (struggleId) => {
    const response = await fetch(`/api/struggles/${struggleId}`, {
        method: "DELETE",
    });
    return response.json();
};

export const addContradiction = async (contradictionData) => {
    const response = await fetch("/api/contradictions", {
        method: "POST",
        body: JSON.stringify(contradictionData),
        headers: { "Content-Type": "application/json" },
    });
    return response.json();
};

export const getContradictions = async () => {
    const response = await fetch("/api/contradictions");
    return response.json();
};

export const updateContradiction = async (contradictionId, updatedData) => {
    const response = await fetch(`/api/contradictions/${contradictionId}`, {
        method: "PUT",
        body: JSON.stringify(updatedData),
        headers: { "Content-Type": "application/json" },
    });
    return response.json();
};

export const deleteContradiction = async (contradictionId) => {
    const response = await fetch(`/api/contradictions/${contradictionId}`, {
        method: "DELETE",
    });
    return response.json();
};

export const addTimeline = async (timelineData) => {
  const formConfig = formConfigs.TIMELINES;
  if (!formConfig) {
    throw new Error('No form configuration found for TIMELINES');
  }

  const payload = {};
  for (const [fieldName, fieldConfig] of Object.entries(formConfig.fields)) {
    if (fieldConfig.visible !== false && !fieldConfig.autoGenerated) {
      payload[fieldName] = timelineData[fieldName] || '';
    }
  }

  logDebug('Submitting TIMELINES data:', payload);
  return Promise.resolve({ success: true }); // Replace with actual API call
}

// Function to fetch data from a specific Google Sheet
export const fetchSheetData = async (sheetName) => {
  try {
    await initializeAuth();
    const sheet = doc.sheetsByTitle[sheetName];
    if (!sheet) {
      throw new Error(`Sheet with name "${sheetName}" not found`);
    }

    const rows = await sheet.getRows();
    const data = rows.map((row) => row._rawData); // Extract raw data from rows
    console.log(`Data from sheet "${sheetName}":`, data); // Debug log
    return data;
  } catch (error) {
    console.error(`Error fetching data from sheet "${sheetName}":`, error);
    throw error;
  }
};

// Function to fetch and process timeline data
export const getTimelines = async (filters) => {
  try {
    console.log('Fetching timeline data with filters:', filters); // Debug log
    const timelines = await fetchSheetData('TIMELINES');
    const registry = await fetchSheetData('TIMELINE_REGISTRY_SHEET');
    const grid = await fetchSheetData('TIMELINE_GRID_SHEET');

    // Merge and process data
    const mergedData = timelines.map((timeline) => {
      const linkedPhases = timeline[3]?.split(',').map((phaseId) =>
        registry.find((entry) => entry[0] === phaseId)
      );
      const linkedGridRows = timeline[4]?.split(',').map((gridId) =>
        grid.find((entry) => entry[0] === gridId)
      );

      return {
        timeline_id: timeline[0],
        title: timeline[1],
        description: timeline[2],
        linked_phases: linkedPhases || [],
        linked_grid_rows: linkedGridRows || [],
        category: timeline[5],
        is_public: timeline[6] === 'TRUE',
      };
    });

    console.log('Merged timeline data:', mergedData); // Debug log
    return mergedData;
  } catch (error) {
    console.error('Error fetching timeline data:', error);
    throw error;
  }
};

export const updateTimeline = async (timelineId, updatedData) => {
    const response = await fetch(`/api/timelines/${timelineId}`, {
        method: "PUT",
        body: JSON.stringify(updatedData),
        headers: { "Content-Type": "application/json" },
    });
    return response.json();
};

export const deleteTimeline = async (timelineId) => {
    const response = await fetch(`/api/timelines/${timelineId}`, {
        method: "DELETE",
    });
    return response.json();
};

export const addStructure = async (structureData) => {
    const response = await fetch("/api/structures", {
        method: "POST",
        body: JSON.stringify(structureData),
        headers: { "Content-Type": "application/json" },
    });
    return response.json();
};

export const getStructures = async () => {
    const response = await fetch("/api/structures");
    return response.json();
};

export const updateStructure = async (structureId, updatedData) => {
    const response = await fetch(`/api/structures/${structureId}`, {
        method: "PUT",
        body: JSON.stringify(updatedData),
        headers: { "Content-Type": "application/json" },
    });
    return response.json();
};

export const deleteStructure = async (structureId) => {
    const response = await fetch(`/api/structures/${structureId}`, {
        method: "DELETE",
    });
    return response.json();
};

export const addRelationship = async (relationshipData) => {
    const response = await fetch("/api/relationships", {
        method: "POST",
        body: JSON.stringify(relationshipData),
        headers: { "Content-Type": "application/json" },
    });
    return response.json();
};

export const getRelationships = async () => {
    const response = await fetch("/api/relationships");
    return response.json();
};

export const updateRelationship = async (relationshipId, updatedData) => {
    const response = await fetch(`/api/relationships/${relationshipId}`, {
        method: "PUT",
        body: JSON.stringify(updatedData),
        headers: { "Content-Type": "application/json" },
    });
    return response.json();
};

export const deleteRelationship = async (relationshipId) => {
    const response = await fetch(`/api/relationships/${relationshipId}`, {
        method: "DELETE",
    });
    return response.json();
};

// Add similar methods for other sheets (e.g., struggles, contradictions, etc.).

// Add this new function
export async function fetchLinkedSheetData(sheetName) {
  try {
    const data = await getSheetData(sheetName);
    return data.map(row => ({
      id: row.id || row[`${sheetName.toLowerCase()}_id`],
      name: row.name || row.WHO || row.headline
    }));
  } catch (error) {
    console.error(`Error fetching linked sheet data for ${sheetName}:`, error);
    return [];
  }
}

export async function getTimelineRegistry() {
  return getSheetData('TIMELINE_REGISTRY');
}

export async function getTimelineGrid() {
  return getSheetData('TIMELINE_GRID');
}

export async function addTimelineRegistry(registryData) {
  return addRowToSheet('TIMELINE_REGISTRY', registryData);
}

export async function addTimelineGrid(gridData) {
  return addRowToSheet('TIMELINE_GRID', gridData);
}

const EntitiesForm = ({ show, onHide, onSubmit }) => {
  const [formData, setFormData] = useState({
    entity_id: '',
    WHO: [],
    SPECTRUM: '',
    bio: '',
    entity_type: '',
    name: '',
    description: ''
  });

  const [entities, setEntities] = useState([]);

  useEffect(() => {
    const fetchEntities = async () => {
      try {
        const data = await getSheetData('ENTITIES');
        if (data && Array.isArray(data)) {
          setEntities(data.map(entity => ({
            value: entity.entity_id || entity.name,
            label: entity.name
          })));
        }
      } catch (err) {
        console.error('Error fetching entities:', err);
      }
    };

    fetchEntities();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleMultiSelectChange = (name, value) => {
    setFormData(prev => ({ ...prev, [name]: Array.isArray(value) ? value : [value] }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Map data for ENTITIES table
      const entityData = {
        entity_id: formData.entity_id,
        WHO: formData.WHO,
        bio: formData.bio,
        entity_type: formData.entity_type,
        SPECTRUM: formData.SPECTRUM,
        name: formData.name,
        description: formData.description
      };

      // Add entry to ENTITIES table
      await addRowToSheet('ENTITIES', entityData);
      alert('Data saved successfully!');
      onSubmit();
      onHide();
      setFormData({
        entity_id: '',
        WHO: [],
        SPECTRUM: '',
        bio: '',
        entity_type: '',
        name: '',
        description: ''
      });
    } catch (error) {
      console.error('Error submitting form:', error);
      alert(`Error: ${error.message}`);
    }
  };

  return (
    <Modal show={show} onHide={onHide}>
      <Modal.Header closeButton>
        <Modal.Title>Create New Card</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>WHO (Entity Name)</Form.Label>
            <NotionMultiSelect
              options={entities}
              value={formData.WHO}
              onChange={(value) => handleMultiSelectChange('WHO', value)}
              labelledBy="Select WHO"
              allowNew={true}
              placeholder="Search or add new entities..."
            />
          </Form.Group>
          <Form.Group controlId="formSpectrum">
            <Form.Label>Spectrum</Form.Label>
            <Form.Select
              name="SPECTRUM"
              value={formData.SPECTRUM}
              onChange={handleChange}
            >
              <option value="">Select an option</option>
              <option value="LEFT">Left</option>
              <option value="CENTRE">Centre</option>
              <option value="RIGHT">Right</option>
            </Form.Select>
          </Form.Group>
          <Form.Group controlId="formEntityBio">
            <Form.Label>Bio</Form.Label>
            <Form.Control
              type="text"
              name="bio"
              value={formData.bio}
              onChange={handleChange}
            />
          </Form.Group>
          <Form.Group controlId="formEntityType">
            <Form.Label>Entity Type</Form.Label>
            <Form.Select
              name="entity_type"
              value={formData.entity_type}
              onChange={handleChange}
              required
            >
              <option value="">Select an option</option>
              <option value="Character">Character</option>
              <option value="Party">Party</option>
              <option value="Movement">Movement</option>
            </Form.Select>
          </Form.Group>
          <Form.Group controlId="formEntityName">
            <Form.Label>Name</Form.Label>
            <Form.Control
              type="text"
              name="name"
              value={formData.name}
              onChange={handleChange}
            />
          </Form.Group>
          <Form.Group controlId="formEntityDescription">
            <Form.Label>Description</Form.Label>
            <Form.Control
              type="text"
              name="description"
              value={formData.description}
              onChange={handleChange}
            />
          </Form.Group>
          <Button variant="primary" type="submit">
            Submit
          </Button>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

export default EntitiesForm;